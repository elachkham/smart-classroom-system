/**
 * SMART CLASSROOM - JavaScript pour la Cam√©ra
 * Gestion du flux vid√©o et des contr√¥les cam√©ra
 */

// ================================
// VARIABLES GLOBALES CAM√âRA
// ================================

let cameraActive = false;
let videoElement = null;
let videoPlaceholder = null;
let reconnectAttempts = 0;
let maxReconnectAttempts = 5;
let videoRefreshInterval = null;

// ================================
// INITIALISATION CAM√âRA
// ================================

function setupVideoStream() {
    videoElement = document.getElementById('videoStream');
    videoPlaceholder = document.getElementById('videoPlaceholder');
    
    if (!videoElement) {
        console.log('√âl√©ment vid√©o non trouv√©');
        return;
    }
    
    // V√©rifier le statut initial
    checkCameraStatus();
    
    // Auto-refresh p√©riodique
    startVideoRefreshMonitoring();
}

async function checkCameraStatus() {
    try {
        const response = await api.get('/api/camera/status');
        if (response.success) {
            cameraActive = response.active;
            updateCameraUI(response.active);
            
            if (response.active) {
                setTimeout(startVideoStream, 1000);
            }
        }
    } catch (error) {
        console.log('Status cam√©ra non disponible:', error);
        updateCameraUI(false);
    }
}

// ================================
// CONTR√îLE DU FLUX VID√âO
// ================================

function startVideoStream() {
    if (!videoElement) return;
    
    const timestamp = new Date().getTime();
    videoElement.src = `/api/camera/stream?t=${timestamp}`;
    
    // Optimisations navigateur
    videoElement.style.imageRendering = 'auto';
    videoElement.loading = 'eager';
    
    console.log('üé• Stream vid√©o d√©marr√©');
    reconnectAttempts = 0;
}

function stopVideoStream() {
    if (!videoElement) return;
    
    videoElement.src = '';
    videoElement.style.display = 'none';
    
    if (videoPlaceholder) {
        videoPlaceholder.style.display = 'flex';
        videoPlaceholder.innerHTML = 'üé• Cam√©ra Arr√™t√©e<br><small>Cliquez sur "D√©marrer Cam√©ra"</small>';
    }
}

function handleVideoLoad(img) {
    console.log('‚úÖ Flux vid√©o charg√© avec succ√®s');
    img.style.display = 'block';
    
    if (videoPlaceholder) {
        videoPlaceholder.style.display = 'none';
    }
    
    // R√©initialiser les tentatives de reconnexion
    reconnectAttempts = 0;
}

function handleVideoError(img) {
    console.log('‚ö†Ô∏è Erreur flux vid√©o - tentative de reconnexion...');
    
    if (reconnectAttempts < maxReconnectAttempts && cameraActive) {
        reconnectAttempts++;
        
        // Reconnexion avec d√©lai progressif
        setTimeout(() => {
            if (cameraActive) {
                startVideoStream();
            }
        }, 1000 * reconnectAttempts);
    } else {
        console.log('‚ùå Trop de tentatives de reconnexion');
        img.style.display = 'none';
        showVideoPlaceholder('Connexion √©chou√©e - Actualisez la page');
    }
}

function showVideoPlaceholder(message) {
    if (videoPlaceholder) {
        videoPlaceholder.style.display = 'flex';
        videoPlaceholder.innerHTML = `üì∑ ${message}`;
    }
}

// ================================
// CONTR√îLES CAM√âRA
// ================================

async function toggleCamera() {
    try {
        // V√©rifier le statut actuel
        const status = await api.get('/api/camera/status');
        const isActive = status.success && status.active;
        
        // Choisir l'endpoint appropri√©
        const endpoint = isActive ? '/api/camera/stop' : '/api/camera/start';
        
        // Envoyer la commande
        const response = await api.post(endpoint);
        
        if (response.success) {
            cameraActive = !isActive;
            updateCameraUI(cameraActive);
            notifications.success(response.message);
            
            if (cameraActive) {
                setTimeout(startVideoStream, 1000);
            } else {
                stopVideoStream();
            }
        } else {
            notifications.error(response.message);
        }
    } catch (error) {
        console.error('Erreur toggle cam√©ra:', error);
        notifications.error('Erreur de connexion au syst√®me');
    }
}

function updateCameraUI(isActive) {
    const button = document.getElementById('cameraBtn');
    
    if (button) {
        if (isActive) {
            button.textContent = 'Arr√™ter Cam√©ra';
            button.className = 'btn btn-danger';
        } else {
            button.textContent = 'D√©marrer Cam√©ra';
            button.className = 'btn btn-success';
        }
    }
    
    // Mettre √† jour les indicateurs de statut
    updateCameraStatusIndicators(isActive);
}

function updateCameraStatusIndicators(isActive) {
    // Mettre √† jour tous les indicateurs de cam√©ra sur la page
    const indicators = document.querySelectorAll('[id*="camera-status"]');
    indicators.forEach(indicator => {
        if (indicator.classList.contains('status-indicator')) {
            indicator.className = `status-indicator ${isActive ? '' : 'inactive'}`;
        } else if (indicator.classList.contains('status-text') || indicator.tagName === 'SPAN') {
            indicator.textContent = isActive ? 'Actif' : 'Inactif';
        }
    });
}

// ================================
// FONCTIONS UTILITAIRES CAM√âRA
// ================================

async function takeSnapshot() {
    try {
        const response = await api.get('/api/camera/snapshot');
        
        if (response.success) {
            // Cr√©er un lien de t√©l√©chargement
            const link = document.createElement('a');
            link.href = response.image;
            
            const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
            link.download = `smart_classroom_snapshot_${timestamp}.jpg`;
            
            // D√©clencher le t√©l√©chargement
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            notifications.success('Snapshot sauvegard√©');
        } else {
            notifications.error(response.message || 'Erreur lors du snapshot');
        }
    } catch (error) {
        console.error('Erreur snapshot:', error);
        notifications.error('Erreur lors du snapshot');
    }
}

function refreshStream() {
    if (cameraActive && videoElement) {
        startVideoStream();
        notifications.info('Flux vid√©o actualis√©');
    } else {
        notifications.error('Cam√©ra non active');
    }
}

// ================================
// MONITORING ET MAINTENANCE
// ================================

function startVideoRefreshMonitoring() {
    // V√©rifier p√©riodiquement si le flux est toujours actif
    videoRefreshInterval = setInterval(() => {
        if (cameraActive && videoElement && videoElement.style.display === 'none') {
            console.log('üîÑ Auto-refresh du stream vid√©o');
            startVideoStream();
        }
    }, 15000); // Toutes les 15 secondes
}

function stopVideoRefreshMonitoring() {
    if (videoRefreshInterval) {
        clearInterval(videoRefreshInterval);
        videoRefreshInterval = null;
    }
}

// ================================
// GESTION DES ERREURS
// ================================

function handleCameraError(error, context = 'g√©n√©rique') {
    console.error(`Erreur cam√©ra (${context}):`, error);
    
    // G√©rer diff√©rents types d'erreurs
    if (error.message && error.message.includes('404')) {
        notifications.error('Service cam√©ra non disponible');
    } else if (error.message && error.message.includes('timeout')) {
        notifications.warning('Timeout cam√©ra - V√©rifiez la connexion');
    } else {
        notifications.error(`Erreur cam√©ra: ${error.message || 'Erreur inconnue'}`);
    }
    
    // R√©initialiser l'√©tat si n√©cessaire
    cameraActive = false;
    updateCameraUI(false);
}

// ================================
// OPTIMISATIONS PERFORMANCE
// ================================

const CameraOptimizer = {
    // R√©duire la qualit√© du stream pour √©conomiser la bande passante
    setLowQuality() {
        if (videoElement) {
            videoElement.style.imageRendering = 'pixelated';
        }
    },
    
    // Restaurer la qualit√© normale
    setNormalQuality() {
        if (videoElement) {
            videoElement.style.imageRendering = 'auto';
        }
    },
    
    // Adapter la qualit√© selon la connexion
    adaptQuality() {
        // Estimer la qualit√© de connexion (simplifi√©)
        if (navigator.connection) {
            const connection = navigator.connection;
            if (connection.effectiveType === 'slow-2g' || connection.effectiveType === '2g') {
                this.setLowQuality();
            } else {
                this.setNormalQuality();
            }
        }
    }
};

// ================================
// DETECTION DE VISAGES (OPTIONNEL)
// ================================

const FaceDetectionOverlay = {
    canvas: null,
    context: null,
    
    init() {
        // Cr√©er un canvas overlay pour afficher les d√©tections de visages
        this.canvas = document.createElement('canvas');
        this.canvas.style.position = 'absolute';
        this.canvas.style.top = '0';
        this.canvas.style.left = '0';
        this.canvas.style.pointerEvents = 'none';
        this.canvas.style.zIndex = '10';
        
        this.context = this.canvas.getContext('2d');
        
        // Ajouter le canvas au container vid√©o
        const videoContainer = document.querySelector('.video-container');
        if (videoContainer) {
            videoContainer.style.position = 'relative';
            videoContainer.appendChild(this.canvas);
        }
    },
    
    updateSize() {
        if (this.canvas && videoElement) {
            this.canvas.width = videoElement.offsetWidth;
            this.canvas.height = videoElement.offsetHeight;
        }
    },
    
    drawFaceBoxes(faces) {
        if (!this.context) return;
        
        // Effacer le canvas
        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
        
        // Dessiner les bo√Ætes de d√©tection
        this.context.strokeStyle = '#00ff00';
        this.context.lineWidth = 2;
        
        faces.forEach(face => {
            this.context.strokeRect(face.x, face.y, face.width, face.height);
        });
    },
    
    clear() {
        if (this.context) {
            this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
        }
    }
};

// ================================
// GESTION DES √âV√âNEMENTS
// ================================

// Nettoyage lors de la fermeture de la page
window.addEventListener('beforeunload', () => {
    stopVideoRefreshMonitoring();
});

// Gestion de la perte/reprise de focus
document.addEventListener('visibilitychange', () => {
    if (document.visibilityState === 'visible' && cameraActive) {
        // Actualiser le flux quand la page redevient visible
        setTimeout(refreshStream, 1000);
    }
});

// Gestion du redimensionnement pour l'overlay
window.addEventListener('resize', Utils.debounce(() => {
    if (FaceDetectionOverlay.canvas) {
        FaceDetectionOverlay.updateSize();
    }
}, 250));

// ================================
// INITIALISATION AUTOMATIQUE
// ================================

// Auto-initialisation si on est sur une page avec vid√©o
document.addEventListener('DOMContentLoaded', () => {
    if (document.getElementById('videoStream')) {
        setupVideoStream();
        CameraOptimizer.adaptQuality();
        
        // Initialiser l'overlay de d√©tection si n√©cessaire
        if (document.querySelector('.face-guide-overlay')) {
            FaceDetectionOverlay.init();
        }
    }
});

// ================================
// EXPORT DES FONCTIONS GLOBALES
// ================================

// Rendre les fonctions principales disponibles globalement
window.cameraControls = {
    toggle: toggleCamera,
    snapshot: takeSnapshot,
    refresh: refreshStream,
    start: startVideoStream,
    stop: stopVideoStream,
    status: checkCameraStatus
};


/**
 * OPTIMISATIONS FRONTEND POUR R√âDUIRE LA LATENCE VID√âO
 * Ajoutez ce code √† votre camera.js ou utilisez-le pour remplacer les fonctions existantes
 */

// ================================
// GESTION OPTIMIS√âE DU FLUX VID√âO
// ================================

class OptimizedVideoStream {
    constructor(videoElementId, placeholderId) {
        this.videoElement = document.getElementById(videoElementId);
        this.placeholder = document.getElementById(placeholderId);
        this.isActive = false;
        this.reconnectAttempts = 0;
        this.maxReconnectAttempts = 3;
        this.streamUrl = '/api/camera/stream';
        this.fastStreamUrl = '/api/camera/stream/fast';
        this.useOptimizedStream = true;
        
        // Param√®tres d'optimisation
        this.refreshInterval = null;
        this.errorTimeout = null;
        this.loadTimeout = null;
        
        this.init();
    }
    
    init() {
        if (!this.videoElement || !this.placeholder) {
            console.warn('√âl√©ments vid√©o non trouv√©s');
            return;
        }
        
        // Optimisations de l'√©l√©ment img pour le streaming
        this.videoElement.style.imageRendering = 'auto';
        this.videoElement.style.objectFit = 'cover';
        this.videoElement.style.maxWidth = '100%';
        this.videoElement.style.height = 'auto';
        
        // √âv√©nements optimis√©s
        this.setupEventListeners();
        
        console.log('üé• OptimizedVideoStream initialis√©');
    }
    
    setupEventListeners() {
        // √âv√©nement de chargement r√©ussi
        this.videoElement.onload = () => {
            this.handleSuccessfulLoad();
        };
        
        // √âv√©nement d'erreur avec retry intelligent
        this.videoElement.onerror = () => {
            this.handleLoadError();
        };
        
        // D√©tecter quand l'image s'arr√™te de se mettre √† jour
        this.setupStagnationDetection();
        
        // Optimisation de la gestion de la m√©moire
        this.setupMemoryOptimization();
    }
    
    setupStagnationDetection() {
        // D√©tecter si le stream se fige
        let lastImageData = null;
        let stagnationCount = 0;
        
        setInterval(() => {
            if (!this.isActive || !this.videoElement.complete) return;
            
            try {
                // Cr√©er un canvas temporaire pour comparer les images
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                canvas.width = 50; // Petite taille pour performance
                canvas.height = 50;
                
                ctx.drawImage(this.videoElement, 0, 0, 50, 50);
                const currentImageData = ctx.getImageData(0, 0, 50, 50).data;
                
                if (lastImageData) {
                    // Comparer avec l'image pr√©c√©dente
                    let diff = 0;
                    for (let i = 0; i < currentImageData.length; i += 4) {
                        diff += Math.abs(currentImageData[i] - lastImageData[i]);
                    }
                    
                    if (diff < 100) { // Image identique
                        stagnationCount++;
                        if (stagnationCount > 5) { // 5 secondes sans changement
                            console.log('üîÑ Stream fig√© d√©tect√©, red√©marrage...');
                            this.refresh();
                            stagnationCount = 0;
                        }
                    } else {
                        stagnationCount = 0;
                    }
                }
                
                lastImageData = currentImageData;
                
            } catch (error) {
                // Ignorer les erreurs de comparaison
            }
        }, 1000); // V√©rifier chaque seconde
    }
    
    setupMemoryOptimization() {
        // Nettoyer la m√©moire p√©riodiquement
        setInterval(() => {
            if (this.isActive && this.videoElement.src) {
                // Forcer le garbage collection du navigateur
                if (window.gc) {
                    window.gc();
                }
            }
        }, 30000); // Toutes les 30 secondes
    }
    
    start() {
        if (this.isActive) {
            console.log('Stream d√©j√† actif');
            return;
        }
        
        this.isActive = true;
        this.reconnectAttempts = 0;
        
        console.log('üé• D√©marrage du stream optimis√©');
        this.startStream();
        
        // Auto-refresh p√©riodique pour maintenir la fra√Æcheur
        this.refreshInterval = setInterval(() => {
            this.refreshStream();
        }, 30000); // Refresh toutes les 30 secondes
    }
    
    startStream() {
        if (!this.isActive) return;
        
        // Choisir l'URL optimis√©e selon les performances
        const streamUrl = this.useOptimizedStream ? this.fastStreamUrl : this.streamUrl;
        const timestamp = Date.now();
        
        // Timeout pour le chargement
        this.loadTimeout = setTimeout(() => {
            if (this.videoElement.style.display === 'none') {
                console.log('‚è±Ô∏è Timeout de chargement, retry...');
                this.handleLoadError();
            }
        }, 5000);
        
        this.videoElement.src = `${streamUrl}?t=${timestamp}&cache=${Math.random()}`;
        
        console.log(`üîó Stream d√©marr√©: ${streamUrl}`);
    }
    
    handleSuccessfulLoad() {
        console.log('‚úÖ Stream charg√© avec succ√®s');
        
        // Afficher la vid√©o
        this.videoElement.style.display = 'block';
        this.placeholder.style.display = 'none';
        
        // R√©initialiser les compteurs d'erreur
        this.reconnectAttempts = 0;
        
        // Annuler le timeout de chargement
        if (this.loadTimeout) {
            clearTimeout(this.loadTimeout);
            this.loadTimeout = null;
        }
        
        // Optimisation: Pr√©charger la prochaine frame
        this.preloadNextFrame();
    }
    
    preloadNextFrame() {
        // Technique pour r√©duire la latence en pr√©chargeant
        if (!this.isActive) return;
        
        setTimeout(() => {
            if (this.isActive && this.videoElement.complete) {
                const preloadImg = new Image();
                preloadImg.src = this.videoElement.src + '&preload=' + Date.now();
            }
        }, 100);
    }
    
    handleLoadError() {
        console.log('‚ö†Ô∏è Erreur de chargement du stream');
        
        // Masquer la vid√©o, afficher le placeholder
        this.videoElement.style.display = 'none';
        this.placeholder.style.display = 'flex';
        this.placeholder.innerHTML = 'üì∑ Reconnexion...<br><small>Tentative ' + (this.reconnectAttempts + 1) + '</small>';
        
        // Annuler les timeouts en cours
        if (this.loadTimeout) {
            clearTimeout(this.loadTimeout);
            this.loadTimeout = null;
        }
        
        if (this.errorTimeout) {
            clearTimeout(this.errorTimeout);
        }
        
        // Retry avec d√©lai progressif
        if (this.reconnectAttempts < this.maxReconnectAttempts && this.isActive) {
            this.reconnectAttempts++;
            const delay = Math.min(1000 * this.reconnectAttempts, 5000); // Max 5 secondes
            
            this.errorTimeout = setTimeout(() => {
                if (this.isActive) {
                    console.log(`üîÑ Tentative de reconnexion ${this.reconnectAttempts}`);
                    this.startStream();
                }
            }, delay);
        } else {
            console.log('‚ùå Trop de tentatives de reconnexion');
            this.placeholder.innerHTML = 'üì∑ Erreur de connexion<br><small>Cliquez sur "Actualiser" pour r√©essayer</small>';
        }
    }
    
    refresh() {
        console.log('üîÑ Actualisation du stream');
        this.reconnectAttempts = 0;
        
        if (this.isActive) {
            this.startStream();
        }
    }
    
    refreshStream() {
        // Refresh p√©riodique moins agressif
        if (this.isActive && this.videoElement.style.display !== 'none') {
            this.refresh();
        }
    }
    
    stop() {
        console.log('üõë Arr√™t du stream optimis√©');
        
        this.isActive = false;
        
        // Nettoyer les timeouts
        if (this.refreshInterval) {
            clearInterval(this.refreshInterval);
            this.refreshInterval = null;
        }
        
        if (this.errorTimeout) {
            clearTimeout(this.errorTimeout);
            this.errorTimeout = null;
        }
        
        if (this.loadTimeout) {
            clearTimeout(this.loadTimeout);
            this.loadTimeout = null;
        }
        
        // Arr√™ter le stream
        this.videoElement.src = '';
        this.videoElement.style.display = 'none';
        this.placeholder.style.display = 'flex';
        this.placeholder.innerHTML = 'üé• Stream arr√™t√©<br><small>Cliquez sur "D√©marrer Cam√©ra"</small>';
    }
    
    toggleOptimization() {
        this.useOptimizedStream = !this.useOptimizedStream;
        console.log(`üîß Stream ${this.useOptimizedStream ? 'optimis√©' : 'normal'} activ√©`);
        
        if (this.isActive) {
            this.refresh();
        }
    }
}

// ================================
// INT√âGRATION AVEC LE CODE EXISTANT
// ================================

// Instance globale
let optimizedVideoStream = null;

// Fonction pour remplacer setupVideoStream()
function setupOptimizedVideoStream() {
    optimizedVideoStream = new OptimizedVideoStream('videoStream', 'videoPlaceholder');
    
    // V√©rifier le statut initial
    checkCameraStatus().then(isActive => {
        if (isActive) {
            setTimeout(() => {
                optimizedVideoStream.start();
            }, 1000);
        }
    });
}

// Fonctions optimis√©es pour remplacer les existantes
function startVideoStreamOptimized() {
    if (optimizedVideoStream) {
        optimizedVideoStream.start();
    } else {
        setupOptimizedVideoStream();
    }
}

function stopVideoStreamOptimized() {
    if (optimizedVideoStream) {
        optimizedVideoStream.stop();
    }
}

function refreshStreamOptimized() {
    if (optimizedVideoStream) {
        optimizedVideoStream.refresh();
    }
}

// ================================
// OPTIMISATIONS SUPPL√âMENTAIRES
// ================================

// D√©tection de la bande passante pour adapter la qualit√©
class BandwidthDetector {
    constructor() {
        this.isDetecting = false;
        this.bandwidth = 'unknown';
    }
    
    async detectBandwidth() {
        if (this.isDetecting) return this.bandwidth;
        
        this.isDetecting = true;
        
        try {
            const startTime = Date.now();
            const response = await fetch('/api/camera/snapshot', { 
                cache: 'no-cache',
                method: 'GET'
            });
            
            if (response.ok) {
                const blob = await response.blob();
                const endTime = Date.now();
                const duration = endTime - startTime;
                const sizeKB = blob.size / 1024;
                const speedKBps = sizeKB / (duration / 1000);
                
                if (speedKBps > 500) {
                    this.bandwidth = 'high';
                } else if (speedKBps > 200) {
                    this.bandwidth = 'medium';
                } else {
                    this.bandwidth = 'low';
                }
                
                console.log(`üìä Bande passante d√©tect√©e: ${this.bandwidth} (${speedKBps.toFixed(1)} KB/s)`);
            }
        } catch (error) {
            console.log('Erreur d√©tection bande passante:', error);
            this.bandwidth = 'medium'; // Valeur par d√©faut
        }
        
        this.isDetecting = false;
        return this.bandwidth;
    }
    
    getOptimalStreamUrl() {
        switch (this.bandwidth) {
            case 'high':
                return '/api/camera/stream';
            case 'medium':
                return '/api/camera/stream/fast';
            case 'low':
                return '/api/camera/stream/fast';
            default:
                return '/api/camera/stream/fast';
        }
    }
}

// Instance globale du d√©tecteur
const bandwidthDetector = new BandwidthDetector();

// ================================
// OPTIMISATIONS DE PERFORMANCE
// ================================

// Throttle pour √©viter trop de requ√™tes
function throttle(func, limit) {
    let inThrottle;
    return function() {
        const args = arguments;
        const context = this;
        if (!inThrottle) {
            func.apply(context, args);
            inThrottle = true;
            setTimeout(() => inThrottle = false, limit);
        }
    };
}

// Debounce pour les actions utilisateur
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// Optimisation des requ√™tes r√©seau
const optimizedFetch = throttle(async (url, options = {}) => {
    try {
        const response = await fetch(url, {
            ...options,
            cache: 'no-cache',
            headers: {
                'Cache-Control': 'no-cache',
                'Pragma': 'no-cache',
                ...options.headers
            }
        });
        return response;
    } catch (error) {
        console.error('Erreur requ√™te optimis√©e:', error);
        throw error;
    }
}, 100); // Maximum 1 requ√™te par 100ms

// ================================
// GESTION INTELLIGENTE DE LA QUALIT√â
// ================================

class QualityManager {
    constructor() {
        this.currentQuality = 'auto';
        this.frameDropCount = 0;
        this.lastFrameTime = 0;
        this.performanceMode = false;
    }
    
    analyzePerformance() {
        const now = Date.now();
        const timeSinceLastFrame = now - this.lastFrameTime;
        
        if (timeSinceLastFrame > 200) { // Plus de 200ms = frame drop
            this.frameDropCount++;
            
            if (this.frameDropCount > 5 && !this.performanceMode) {
                console.log('üêå Performance d√©grad√©e d√©tect√©e, activation du mode performance');
                this.enablePerformanceMode();
            }
        } else {
            this.frameDropCount = Math.max(0, this.frameDropCount - 1);
            
            if (this.frameDropCount === 0 && this.performanceMode) {
                console.log('üöÄ Performance restaur√©e, d√©sactivation du mode performance');
                this.disablePerformanceMode();
            }
        }
        
        this.lastFrameTime = now;
    }
    
    enablePerformanceMode() {
        this.performanceMode = true;
        
        // R√©duire la qualit√© du stream
        if (optimizedVideoStream) {
            optimizedVideoStream.fastStreamUrl = '/api/camera/stream/fast';
            optimizedVideoStream.useOptimizedStream = true;
            optimizedVideoStream.refresh();
        }
        
        // R√©duire la fr√©quence des mises √† jour
        document.body.classList.add('performance-mode');
    }
    
    disablePerformanceMode() {
        this.performanceMode = false;
        
        // Restaurer la qualit√© normale
        if (optimizedVideoStream) {
            optimizedVideoStream.useOptimizedStream = false;
            optimizedVideoStream.refresh();
        }
        
        document.body.classList.remove('performance-mode');
    }
}

// Instance globale du gestionnaire de qualit√©
const qualityManager = new QualityManager();

// ================================
// INITIALISATION AUTOMATIQUE
// ================================

// Remplacer l'initialisation existante
document.addEventListener('DOMContentLoaded', async () => {
    console.log('üöÄ Initialisation des optimisations vid√©o');
    
    // D√©tecter la bande passante
    await bandwidthDetector.detectBandwidth();
    
    // Initialiser le stream optimis√©
    if (document.getElementById('videoStream')) {
        setupOptimizedVideoStream();
        
        // D√©marrer l'analyse de performance
        setInterval(() => {
            qualityManager.analyzePerformance();
        }, 1000);
    }
    
    // Optimisations CSS pour la performance
    addPerformanceCSS();
});

function addPerformanceCSS() {
    const style = document.createElement('style');
    style.textContent = `
        /* Optimisations CSS pour la performance */
        .video-container img {
            will-change: auto;
            transform: translateZ(0); /* Force hardware acceleration */
            backface-visibility: hidden;
        }
        
        .performance-mode .video-container img {
            image-rendering: pixelated; /* Moins de lissage = plus rapide */
        }
        
        .video-placeholder {
            transition: opacity 0.3s ease;
        }
        
        /* R√©duire les animations en mode performance */
        .performance-mode * {
            animation-duration: 0.1s !important;
            transition-duration: 0.1s !important;
        }
    `;
    document.head.appendChild(style);
}

// ================================
// FONCTIONS DE DIAGNOSTIC
// ================================

function diagnoseStreamPerformance() {
    console.log('üîç Diagnostic de performance du stream:');
    console.log('- Bande passante:', bandwidthDetector.bandwidth);
    console.log('- Mode performance:', qualityManager.performanceMode);
    console.log('- Frame drops:', qualityManager.frameDropCount);
    console.log('- Stream actif:', optimizedVideoStream?.isActive);
    console.log('- Tentatives de reconnexion:', optimizedVideoStream?.reconnectAttempts);
    
    if (optimizedVideoStream?.videoElement) {
        const img = optimizedVideoStream.videoElement;
        console.log('- Image charg√©e:', img.complete);
        console.log('- Dimensions:', img.naturalWidth, 'x', img.naturalHeight);
        console.log('- URL actuelle:', img.src.substring(0, 100) + '...');
    }
}

// Fonction utilitaire pour tester diff√©rentes qualit√©s
function testStreamQuality(quality = 'fast') {
    if (!optimizedVideoStream) return;
    
    console.log(`üß™ Test de qualit√©: ${quality}`);
    
    switch (quality) {
        case 'fast':
            optimizedVideoStream.streamUrl = '/api/camera/stream/fast';
            optimizedVideoStream.useOptimizedStream = true;
            break;
        case 'normal':
            optimizedVideoStream.streamUrl = '/api/camera/stream';
            optimizedVideoStream.useOptimizedStream = false;
            break;
        case 'auto':
            optimizedVideoStream.streamUrl = bandwidthDetector.getOptimalStreamUrl();
            break;
    }
    
    optimizedVideoStream.refresh();
}

// ================================
// EXPORT DES FONCTIONS GLOBALES
// ================================

// Rendre les fonctions disponibles globalement pour compatibilit√©
window.videoStreamOptimizations = {
    start: startVideoStreamOptimized,
    stop: stopVideoStreamOptimized,
    refresh: refreshStreamOptimized,
    diagnose: diagnoseStreamPerformance,
    testQuality: testStreamQuality,
    toggleOptimization: () => optimizedVideoStream?.toggleOptimization()
};