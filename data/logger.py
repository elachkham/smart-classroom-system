import csv
import json
import logging
from pathlib import Path
from datetime import datetime
from typing import Dict, Any, List
from config.settings import settings
from data.models import AttendanceRecord, AttentionRecord, EmotionRecord, AccessRecord

class SmartClassroomLogger:
    """Syst√®me de logs centralis√©"""
    
    def __init__(self):
        self.logs_dir = settings.LOGS_PATH
        self.logs_dir.mkdir(exist_ok=True)
        
        # Configuration du logging syst√®me
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(self.logs_dir / 'system.log'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger('SmartClassroom')
        
        # Fichiers CSV pour les diff√©rents types de donn√©es
        self._init_csv_files()
    
    def _init_csv_files(self):
        """Initialiser les fichiers CSV"""
        csv_configs = {
            'attendance.csv': ['timestamp', 'student_name', 'has_class', 'course', 'classroom'],
            'attention.csv': ['timestamp', 'student_name', 'status', 'std_x', 'std_y'],
            'emotions.csv': ['timestamp', 'student_name', 'emotion', 'confidence'],
            'access.csv': ['timestamp', 'student_name', 'action', 'reason']
        }
        
        for filename, fieldnames in csv_configs.items():
            file_path = self.logs_dir / filename
            if not file_path.exists():
                with open(file_path, 'w', newline='', encoding='utf-8') as f:
                    writer = csv.DictWriter(f, fieldnames=fieldnames)
                    writer.writeheader()
    
    def log_attendance(self, record: AttendanceRecord):
        """Enregistrer une pr√©sence"""
        self._write_csv('attendance.csv', {
            'timestamp': record.timestamp.isoformat(),
            'student_name': record.student_name,
            'has_class': record.has_class,
            'course': record.course,
            'classroom': record.classroom
        })
        self.logger.info(f"Pr√©sence: {record.student_name} - {record.course}")
    
    def log_attention(self, record: AttentionRecord):
        """Enregistrer une mesure d'attention - VERSION CORRIG√âE"""
        try:
            self._write_csv('attention.csv', {
                'timestamp': record.timestamp.isoformat(),
                'student_name': record.student_name,
                'status': record.status.value,
                'std_x': f"{record.std_x:.2f}",
                'std_y': f"{record.std_y:.2f}"
            })
            print(f"üìù Log attention √©crit: {record.student_name} - {record.status.value}")
        except Exception as e:
            print(f"‚ùå Erreur √©criture log attention: {e}")
    
    def log_emotion(self, record: EmotionRecord):
        """Enregistrer une √©motion - VERSION CORRIG√âE"""
        try:
            self._write_csv('emotions.csv', {
                'timestamp': record.timestamp.isoformat(),
                'student_name': record.student_name,
                'emotion': record.emotion.value,
                'confidence': f"{record.confidence:.2f}"
            })
            print(f"üìù Log √©motion √©crit: {record.student_name} - {record.emotion.value}")
        except Exception as e:
            print(f"‚ùå Erreur √©criture log √©motion: {e}")
    
    def log_access(self, record: AccessRecord):
        """Enregistrer un acc√®s"""
        self._write_csv('access.csv', {
            'timestamp': record.timestamp.isoformat(),
            'student_name': record.student_name,
            'action': record.action,
            'reason': record.reason
        })
        self.logger.info(f"Acc√®s: {record.action} - {record.student_name}")
    
    def _write_csv(self, filename: str, data: Dict[str, Any]):
        """√âcrire dans un fichier CSV"""
        file_path = self.logs_dir / filename
        with open(file_path, 'a', newline='', encoding='utf-8') as f:
            fieldnames = list(data.keys())
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            writer.writerow(data)
    
    def get_recent_logs(self, log_type: str, limit: int = 50) -> List[Dict]:
        """R√©cup√©rer les logs r√©cents"""
        filename = f"{log_type}.csv"
        file_path = self.logs_dir / filename
        
        if not file_path.exists():
            return []
        
        logs = []
        with open(file_path, 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            logs = list(reader)
        
        return logs[-limit:] if logs else []